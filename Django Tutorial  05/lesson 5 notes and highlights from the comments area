In this part of my Django tutorial I finish up the official Django tutorial, but I plan on making more Django tutorials
after this. We'll cover how to use style sheets, changing the admin pages, changing settings, editing models and much
more.

Numbers at the beginning of descriptions for the tutorial topics there from Derek Banas
and are a reference to mark the code topic areas, as he taught the tutorial. As not to get them
mixed up, they will be placed within parenthesis.  (10)

<!-- (1) Aside from HTML that is defined in your templates
 you also need images, JavaScript, and CSS for generating
 web pages. We store those in the static directory. -->

<!-- (1) Create static directory /polls/static and then in the static directory,
create another 'polls' directory /polls/static/polls, then within the polls directory
you just created, create another directory named images.  In that same polls directory
create a css 'stylesheet' file named style.css.  We will start styling our code within our
style.css file.  define style.css there -->

# ---------- /polls/static/polls/style.css ----------

/* (2) Change the text color of links in lists.
 Go to /polls/templates/polls/index.html to
 add the style sheet */

li a {
    color: green;
}

# ---------- /polls/index.html ----------

<!-- (3) Add the style sheet by pointing to the static directory-->
{% load static %}

<link rel="stylesheet" type="text/css" href="{% static 'polls/style.css' %}" />

<!-- (4) Create the directory /polls/static/polls/images and
save a repeating background image named background.png there.  Get a repeating background
 online, somewhere-->

<!--  Add the image as a background in style.css -->

body {
    background: white url("images/background.png");
}

/* 6 Now customize the admin page in /polls/admin.py */

# L5 display question on admin page,
# publishing date and text question in the admin/polls/question editing pages

class QuestionAdmin(admin.ModelAdmin):
    fields = ['pub_date', 'question_text']

# L4 QuestionAdmin- reverses the order of the date, and question display, which one is above and below
# in the admin/polls/question editing pages

admin.site.register(Question, QuestionAdmin)

# We can break up the data into blocks, by further changing the fields, to fieldset,
# in the field section in class QuestionAdmin.






**********************************************************

# ---------- /polls/index.html ----------

/* (2) Change the text color of links in lists.
 Go to /polls/templates/polls/index.html to
 add the style sheet */

li a {
    color: green;
}

{% if latest_question_list %}
    <ul>
        {% for question in latest_question_list %}
            <li>
                <a href="{% url 'polls:detail' question.id %}">{{question.question_text}}</a>
            </li>
        {% endfor %}
    </ul>
{% else %}
    <p>No polls are available</p>
{% endif %}

# ---------- /polls/static/polls/style.css ----------

/* 2 Change the text color of links in lists.
 Go to /polls/templates/polls/index.html to
 add the style sheet */

li a {
    color: green;
}

/* 5 Add the background */

body {
    background: white url("images/background.png");
}


***************************************************************
# ---------- /polls/admin.py ----------

from django.contrib import admin

from .models import Question, Choice

# 9 Set up the Choice options on the Question page
# extra = 3 says to provide 3 extra choice options by
# default

# 9.a Change StackedInline to TabularInline to
# take up less space

class ChoiceInline(admin.TabularInline):
    model = Choice
    extra = 3

# 7 You can change the order of how items show up
# like this

class QuestionAdmin(admin.ModelAdmin):
    #  fields = ['pub_date', 'question_text']

    #  You can also break up the data in blocks, Add choices to Question page
    fieldsets = [
        (None, {'fields': ['question_text']}),
        ('Date Information', {'fields': ['pub_date']}),
    ]

    #  Updated fieldsets, collapses a field by default, It will say "show" in the browser, which the
    # user can click, to view the date selector and Time selector.
    fieldsets = [
        (None, {'fields': ['question_text']}),
        ('Date Information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]

# Next we will add the choices for the questions to also be displayed on the same page, in a new class:
# We will have two different ways of displaying the choices on the screen.  The first is 'StackedInline'

class ChoiceInline(admin.StackedInline):

    # the model we will use for this is Choice
    model = Choice

    # define how many empty spaces below each choice
    extra = 1

# Make sure Choice is imported
from .models import Question, Choice

# Now we will show the choices in the question admin page by adding the following to the QuestionAdmin class:

  fieldsets = [
        (None, {'fields': ['question_text']}),
        ('Date Information', {'fields': ['pub_date'], 'classes': ['collapse']}),
    ]
    inlines = [ChoiceInline]

# The other neater way of showing the choices is by passing in from TabularInline:
# Instead of:
class ChoiceInline(admin.StackedInline):

# We will import from TabularInline, and leave everything else as is:

class ChoiceInline(admin.TabularInline):

# If you want to have choice show on the admin page, make sure it is registered,
# if you don't register it, it will not display

# L4 register Choice to show up in admin panel
admin.site.register(Choice)



# In the QuestionAdmin class we can diaplay the date published and if it is recent or not:

    # (10) Change the Question list page to display the
    # date published and whether it is recent

    list_display = ('question_text', 'pub_date', 'was_published_recently')

Next we will revisit the models.py file to make the pages look even better.
(11) Over to polls/models.py to fix was_published_recently we add the following
below the return:

    was_published_recently.admin_order_field = 'pub_date'

# We will change the True and False text under heading Was Published Recently to green or red Icons

    was_published_recently.boolean = True

# Change the text above the True / False from Was Published Recently, to a shorter description
    was_published_recently.short_description = 'Published Recently'

# Next we will move back to the admin.py file to make some more changes there.
# We will add a way, at the bottom of the QuestionAdmin class, below the 'list_display,
# for the user to sort by the publishing date.

    # (14) Add a filter box that lets the user sort by pub_date
    list_filter = ['pub_date']

    #  Allow the user to search by question text
    search_fields = ['question_text']

# 15 Over to sampsite/settings.py to change the  page title, we will first make some changes in the
# templates section:


************************************************
# admin.site.register(Question)

# 7 Pass your change to register
admin.site.register(Question, QuestionAdmin)

# 9 Don't have Choice be on its own page
# admin.site.register(Choice)
************************************************

# ---------- sampsite/settings.py ----------



TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',

        # (16) Change 'DIRS': [], to
        'DIRS': [os.path.join(BASE_DIR, 'templates')],

        # (16) That will tell Django to look in the templates dir
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Next, to go with the changes we just made in settings.py TEMPLATES =, we will have to create a directory
# named templates, in the main sampsite directory, and a directory named admin in that templates directory
# (17) Create a templates/admin directory in the dir that contains manage.py

*******************************************************
WSGI_APPLICATION = 'sampsite.wsgi.application'
*******************************************************

# (17) Find the current base_site.html template by typing this in your terminal

python -c "import django; print(django.__path__)"

OUTPUT: ['C:\\Users\\Gina\\PycharmProjects\\Kivy\\venv\\lib\\site-packages\\django']

# Copy the contents for django version 3, of the file base_site.html in the directory
# of the OUTPUT: path above, with \contrib\admin\templates\admin\ added on.

# You can also get the full path to base_site.html by using python shell:

python manage.py shell

# then these two entries

from django.contrib import admin
admin.__path__[0] + "/templates/admin/base_site.html"

OUTPUT: 'C:\\Users\\Gina\\PycharmProjects\\Kivy\\venv\\lib\\site-packages\\django\\contrib\\admin

# or you can just do a search in C: in windows for: base_site.html

# After you copy/paste base_site.html into sampsite/teplates/admin, restart your server:

# ---------- sampsite/templates/admin/base_site.html ----------

# Change the name of the polls administration page from default 'Django administration'
# to custom name 'Polls Administrator'

<!-- (18) Change this -->
<h1 id="site-name"><a href="{% url 'admin:index' %}">{{ site_header|default:_('Django administration') }}</a></h1>

<!-- to this,... -->
<h1 id="site-name"><a href="{% url 'admin:index' %}">Polls Administrator</a></h1>

************************ The end of the tutorial *************************
***************** The following can be used for reference ***********************


# ---------- /polls/models.py ----------

from django.db import models

import datetime
from django.utils import timezone

class Question(models.Model):
    question_text = models.CharField(max_length=200)

    pub_date = models.DateTimeField('date published')

    def __str__(self):
        return self.question_text

    def was_published_recently(self):
        now = timezone.now()

        return now - datetime.timedelta(days=1) <= self.pub_date <= now

    # 12 Sort published recently based on pub_date
    was_published_recently.admin_order_field = 'pub_date'

    # 12 If boolean is true it will display an icon rather then value
    was_published_recently.boolean = True

    # 12 Change the description at the top of the table
    was_published_recently.short_description = 'Published Recently?'

    # 13 Back to polls/admin.py

class Choice(models.Model):

    question = models.ForeignKey(Question, on_delete=models.CASCADE)

    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)

    def __str__(self):
        return self.choice_text



*************** highlights from the comments area ***************






11:11...For some reason mine didn't change, and I don't know what I'm missing..


Hello, try to restart server. That helps.


My server has been hung up before, when I was using it for hours, and I restarted it.  This time it stopped updating
from the beginning, but it went through the motions, when I updated the browser,  when we first turned the hyperlinks
green.  I thank you, because I never would have thought the server would fail me so soon, and restarted it.







I had to change
'DIRS': [os.path.join(BASE_DIR, 'templates')],
line to
'DIRS': [os.path.join(BASE_DIR, 'sampsite/templates')],
For the custom base_site.html template to be used.











